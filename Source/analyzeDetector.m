function srsInfo = analyzeDetector(detector,range)
% function srsInfo = analyzeDetector(detector,range)
%
% This function takes a detector structure and a frequency (or wavelength)
% range and returns which incident beams and which rays from those beams
% contribute to the given range that hit the detector. 
%
%        srsInfo - an n by 5 array, where n is the number of incident rays
%                  that contributed to Raman that hit the detector in the 
%                  given range. The array will contain time slice, index to
%                  the corresponding ray bundle in detector.sourceBeams, 
%                  SRS angle, ray index, and number of contributing SRS rays
%       detector - the detector structure containing the data to be
%                  analyized
%          range - a row vector containing the start and end of the desired 
%                  frequency (wavelength) range for the analysis of the 
%                  detector data. i.e [rangeStart rangeEnd] in rad/s for
%                  frequency or nm for wavelength
%
%   srsInfo(n,1) = time slice of contributing ray bundle
%   srsInfo(n,2) = row index of contributing ray bundle in
%                  detector.sourceBeams
%   srsInfo(n,3) = SRS angle of contributing SRS rays 
%   srsInfo(n,4) = ray index corresponding to a ray in the ray bundle
%                  in srsInfo(n,2)
%   srsInfo(n,5) = number of SRS rays from this rows time slice, 
%                  incident beam, incident ray, and SRS angle

% Edited by: SMH 13/Aug/2020

global cnst

% check whether range is in rad/s or nm
if range(1) > 10000
    rangeType = 'freq';
elseif range(1) > 0 
    rangeType = 'lambda';
else
    error('Range must consist of positive values only')
end

if strcmp(rangeType,'lambda')
    % convert range into rad/s and rearragne so that range(1)<range(2)
    range = (cnst.twopi*cnst.c)./(range./10^9);
    range = [range(2) range(1)];
end

% initialize row counter for srsInfo
row = 1;

% loops through ray bundles and SRS angles
for i = 1:size(detector.frequencies,1)      % "i" corresponds to a ray 
                                            % bundle and SRS angle given in 
                                            % row "i" of detector.sourceParams
    % loop through rays for a given bundle and SRS angle
    for j = 1:size(detector.frequencies,2)
        % Skips empty cells in detector.frequencies
        if isempty(detector.frequencies{i,j})
            continue
        end
        freq = detector.frequencies{i,j};
        % finds how many SRS rays generated by incident ray j contribute to
        % SRS that hits the detector within the given range
        inRange = (freq >= range(1)) & (freq <= range(2));
        n = sum(inRange);
        if n == 0
            continue    % skips to next ray if no frequencies are in range
        else
            srsInfo(row,1:3) = detector.sourceParams(i,:);
            srsInfo(row,4) = j;
            srsInfo(row,5) = n;
            row = row + 1;
        end
    end
end
end